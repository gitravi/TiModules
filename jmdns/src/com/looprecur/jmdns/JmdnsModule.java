/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.looprecur.jmdns;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.titanium.kroll.KrollCallback;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;

import org.appcelerator.titanium.TiContext;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;

import java.io.IOException;

import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceListener;

@Kroll.module(name="Jmdns", id="com.looprecur.jmdns")
public class JmdnsModule extends KrollModule
{

	private static final String LCAT = "JmdnsModule";
	private static final boolean DBG = TiConfig.LOGD;
	
  private JmDNS jmdns = null;
  private ServiceListener listener = null;

	android.net.wifi.WifiManager wifi;
	android.net.wifi.WifiManager.MulticastLock lock;

	
	public JmdnsModule(TiContext tiContext) {
		super(tiContext);
		wifi = (android.net.wifi.WifiManager) tiContext.getActivity().getSystemService(android.content.Context.WIFI_SERVICE);
	}
	
	private void lookForHosts(String serviceName, final KrollCallback success) {
    lock = wifi.createMulticastLock("mylockthereturn");
    lock.setReferenceCounted(true);
    lock.acquire();
		
		try {
        jmdns = JmDNS.create();
        jmdns.addServiceListener(serviceName, listener = new ServiceListener() {

            @Override
            public void serviceResolved(ServiceEvent ev) {
								lock.release();
                String additions = "";
                if (ev.getInfo().getInetAddresses() != null && ev.getInfo().getInetAddresses().length > 0) {
                    additions = ev.getInfo().getInetAddresses()[0].getHostAddress();
                }
								
								KrollDict service = new KrollDict();
								service.put("name", ev.getInfo().getQualifiedName());
								service.put("port", ev.getInfo().getPort());
								service.put("host", additions);

								success.callAsync(service);
            }

            @Override
            public void serviceRemoved(ServiceEvent ev) {
                notifyUser("Service removed: " + ev.getName());
            }

            @Override
            public void serviceAdded(ServiceEvent event) {
                jmdns.requestServiceInfo(event.getType(), event.getName(), 1);
            }
        });
    } catch (IOException e) {
        e.printStackTrace();
        return;
    }
	}
	
	private void notifyUser(String msg) {
		Log.d(LCAT, "================: "+msg);
  }

	private String createServiceName(String type, String domain) {
		return type+"."+domain;
  }

	// Methods
	@Kroll.method
	public void discover(String type, String domain, KrollCallback success) {
		String serviceName = createServiceName(type, domain);
		lookForHosts(serviceName, success);
	}

}
